{"version":3,"sources":["actions/EventTypes.ts","utils/uuid.ts","reducers/user.ts","reducers/index.ts","reducers/sharedb.ts","reducers/problems.ts","reducers/userData.ts","registerServiceWorker.ts","index.tsx"],"names":["EventTypes","s4","Math","floor","random","toString","substring","defaultUser","store","get","id","isAdmin","solutions","updateStore","u","set","combineReducers","doc","state","action","type","SET_DOC","problems","PUZZLES_FETCHED","puzzles","JSON","parse","stringify","PROBLEM_ADDED","index","problem","update","$splice","PROBLEM_DELETED","DESCRIPTION_CHANGED","description","$set","GIVEN_CODE_CHANGED","code","givenCode","AFTER_CODE_CHANGED","afterCode","TEST_ADDED","test","testIndex","tests","TEST_PART_CHANGED","part","value","TEST_DELETED","FILE_ADDED","file","fileIndex","files","FILE_PART_CHANGED","FILE_DELETED","user","forEach","errors","modified","output","passedAll","testResults","$merge","SET_IS_ADMIN","newState","solution","OUTPUT_CHANGED","CODE_CHANGED","BEGIN_RUN_CODE","DELETE_USER_FILE","problemId","name","fIndex","findIndex","f","FILE_WRITTEN","contents","$push","ERROR_CHANGED","DONE_RUNNING_CODE","userData","PROBLEM_VISIBILITY_CHANGED","problemID","visible","completed","PROBLEM_COMPLETION_INFO_FETCHED","completionInfo","USER_COMPLETED_PROBLEM","userID","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","middleware","thunkMiddleware","createStore","rootReducer","applyMiddleware","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0c441d69.chunk.js","sourcesContent":["enum EventTypes {\n    RUN_CODE='run code',\n    DESCRIPTION_CHANGED='description changed',\n    GIVEN_CODE_CHANGED='given code changed',\n    AFTER_CODE_CHANGED='after code changed',\n    PROBLEM_ADDED='problem added',\n    TEST_ADDED='test added',\n    TEST_DELETED='test deleted',\n    TEST_PART_CHANGED='test part changed',\n    FILE_ADDED='file added',\n    FILE_PART_CHANGED='file part changed',\n    FILE_DELETED='file deleted',\n    PROBLEM_DELETED='problem deleted',\n    PUZZLES_FETCHED='puzzles fetched',\n    SET_DOC='set doc',\n    SET_IS_ADMIN='set is admin',\n    CODE_CHANGED='code changed',\n    RESET_CODE='reset code',\n    OUTPUT_CHANGED='output changed',\n    FILE_WRITTEN='file written',\n    ERROR_CHANGED='error changed',\n    TEST_STATUS_CHANGED='test status changed',\n    PROBLEM_PASSED_CHANGED='problem passed changed',\n    BEGIN_RUN_CODE='begin run code',\n    DONE_RUNNING_CODE='done running code',\n    DELETE_USER_FILE='delete user file',\n    USER_COMPLETED_PROBLEM='user completed problem',\n    PROBLEM_COMPLETION_INFO_FETCHED='problem completion info fetched',\n    PROBLEM_VISIBILITY_CHANGED='problem visibility changed'\n};\nexport default EventTypes;","function s4(): string {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nexport default function uuid(): string {\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};","import EventTypes from '../actions/EventTypes';\nimport store from 'storejs';\nimport update from 'immutability-helper';\nimport uuid from '../utils/uuid';\n\nexport interface IUser {\n    isAdmin: boolean;\n    id: string;\n    solutions: { [problemID: string]: {\n        modified: boolean,\n        code: string,\n        errors: string[],\n        files: Array<{\n                contents: string,\n                name: string\n            }>,\n        output: string,\n        passedAll: boolean,\n        testResults: {\n            [testID: string]: {\n                passed: boolean,\n                message: string\n            }\n        }\n    }}\n}\nconst defaultUser: IUser = store.get('user') || {\n    id: uuid(),\n    isAdmin: false,\n    solutions: {}\n};\n\nfunction updateStore(u: IUser): void {\n    store.set('user', u);\n}\n\nexport const user = (state: IUser = defaultUser, action: any) => {\n    if(action.type === EventTypes.PUZZLES_FETCHED) {\n        const { puzzles } = action;\n        const { problems } = puzzles;\n        const solutions = {};\n        problems.forEach((problem) => {\n            const { id, givenCode } = problem;\n            if(!state.solutions || !state.solutions[id]) {\n                solutions[id] = { code: givenCode, errors: [], modified: false, files: [], output: '', passedAll: false, testResults: {} };\n            }\n        })\n        return update(state, {\n            solutions: { $merge: solutions }\n        });\n    } else if(action.type === EventTypes.PROBLEM_ADDED) {\n        const { problem } = action;\n        const { id } = problem;\n        return update(state, {\n            solutions: { \n                [id]: {\n                    $set: {\n                        code: problem.givenCode,\n                        errors: [],\n                        files: [],\n                        modified: false,\n                        output: '',\n                        passedAll: false,\n                        testResults: {}\n                    }\n                }\n            }\n        });\n    } else if(action.type === EventTypes.SET_IS_ADMIN) {\n        const newState = update(state, { isAdmin: { $set: action.isAdmin }});\n        updateStore(newState);\n        return newState;\n    } else if(action.type === EventTypes.GIVEN_CODE_CHANGED) {\n        const { id, code } = action;\n        const solution = state.solutions[id];\n        const { modified } = solution;\n        if(modified) {\n            return state;\n        } else {\n            return update(state, {\n                solutions: {\n                    [id]: {\n                        code: { $set: code}\n                    }\n                }\n            });\n        }\n    } else if(action.type === EventTypes.OUTPUT_CHANGED) {\n        const { id, output } = action;\n        return update(state, {\n            solutions: {\n                [id]: {\n                    output: { $set: output }\n                }\n            }\n        });\n    } else if(action.type === EventTypes.CODE_CHANGED) {\n        const { id, code, modified } = action;\n        const newState = update(state, {\n            solutions: {\n                [id]: {\n                    code: { $set: code },\n                    modified: { $set: modified },\n                    passedAll: { $set: false }\n                }\n            }\n        });\n        updateStore(newState);\n        return newState;\n    } else if(action.type === EventTypes.BEGIN_RUN_CODE) {\n        const { id } = action;\n        return update(state, {\n            solutions: {\n                [id]: {\n                    errors: { $set: [] },\n                    output: { $set: '' },\n                    passedAll: { $set: false },\n                    testResults: { $set: {} },\n                }\n            }\n        });\n    } else if(action.type === EventTypes.DELETE_USER_FILE) {\n        const { problemId, name } = action;\n        const files = state.solutions[problemId].files;\n        const fIndex = files.findIndex((f) => f.name === name);\n        if(fIndex >= 0) {\n            return update(state, {\n                solutions: {\n                    [problemId]: {\n                        files: {$splice: [[fIndex, 1]]}\n                    }\n                }\n            });\n        } else {\n            return state;\n        }\n    } else if(action.type === EventTypes.FILE_WRITTEN) {\n        const { id, name, contents } = action;\n        const files = state.solutions[id].files;\n        const fIndex = files.findIndex((f) => f.name === name);\n        if(fIndex < 0) {\n            return update(state, {\n                solutions: {\n                    [id]: {\n                        files: {\n                            $push: [{ name, contents }]\n                        }\n                    }\n                }\n            });\n        } else {\n            return update(state, {\n                solutions: {\n                    [id]: {\n                        files: {\n                            [fIndex]: {\n                                contents: {$set: contents}\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    } else if(action.type === EventTypes.ERROR_CHANGED) {\n        const { id, errors } = action;\n        return update(state, {\n            solutions: {\n                [id]: {\n                    errors: { $set: errors }\n                }\n            }\n        });\n    } else if(action.type === EventTypes.DONE_RUNNING_CODE) {\n        const { id, passedAll, testResults } = action;\n        const newState = update(state, {\n            solutions: {\n                [id]: {\n                    passedAll: { $set: passedAll },\n                    testResults:{ $set: testResults },\n                }\n            }\n        });\n        updateStore(newState);\n        return newState;\n    } else if(action.type === EventTypes.TEST_ADDED || action.type === EventTypes.TEST_PART_CHANGED || action.type === EventTypes.TEST_DELETED) {\n        const { id } = action;\n        return update(state, {\n            solutions: {\n                [id]: {\n                    passedAll: { $set: false }\n                }\n            }\n        });\n    } else {\n        return state;\n    }\n}","import { combineReducers } from 'redux';\nimport { problems } from './problems';\nimport { user } from './user';\nimport { doc } from './sharedb';\nimport { userData } from './userData';\n\nexport default combineReducers({\n    doc,\n    problems,\n    user,\n    userData\n});","import { IPuzzleSet } from '../components/App';\nimport { SDBDoc } from 'sdb-ts';\nimport EventTypes from '../actions/EventTypes';\n\nexport const doc = (state: SDBDoc<IPuzzleSet>|null = null, action: any) => {\n    if(action.type === EventTypes.SET_DOC) {\n        return action.doc;\n    } else {\n        return state;\n    }\n}","import EventTypes from '../actions/EventTypes';\nimport { IProblem } from '../components/App';\nimport update from 'immutability-helper';\n\nexport const problems = (state: IProblem[] = [], action: any) => {\n    if(action.type === EventTypes.PUZZLES_FETCHED) {\n        const { puzzles } = action;\n        if(puzzles) {\n            return JSON.parse(JSON.stringify([...puzzles.problems]));\n        } else {\n            return [];\n        }\n    } else if(action.type === EventTypes.PROBLEM_ADDED) {\n        const { index, problem } = action;\n        return update(state,  { $splice: [[index, 0, problem]] } );\n    } else if(action.type === EventTypes.PROBLEM_DELETED) {\n        const { index } = action;\n        return update(state, { $splice: [[index, 1]] } );\n    } else if(action.type === EventTypes.DESCRIPTION_CHANGED) {\n        const { index, description } = action;\n        return update(state, {\n            [index]: {\n                description: { $set: description }\n            }\n        });\n    } else if(action.type === EventTypes.GIVEN_CODE_CHANGED) {\n        const { index, code } = action;\n        return update(state, {\n            [index]: {\n                givenCode: { $set: code }\n            }\n        });\n    } else if(action.type === EventTypes.AFTER_CODE_CHANGED) {\n        const { index, code } = action;\n        return update(state, {\n            [index]: {\n                afterCode: { $set: code }\n            }\n        });\n    } else if(action.type === EventTypes.TEST_ADDED) {\n        const { index, test, testIndex } = action;\n        return update(state, {\n            [index]: {\n                tests: {$splice: [[testIndex, 0, test]]}\n            }\n        });\n    } else if(action.type === EventTypes.TEST_PART_CHANGED) {\n        const { index, testIndex, part, value } = action;\n        return update(state, {\n            [index]: {\n                tests: {\n                    [testIndex]: {\n                        [part]: { $set: value }\n                    }\n                }\n            }\n        });\n    } else if(action.type === EventTypes.TEST_DELETED) {\n        const { index, testIndex } = action;\n        return update(state, {\n            [index]: {\n                tests: {$splice: [[testIndex, 1]]}\n            }\n        });\n    } else if(action.type === EventTypes.FILE_ADDED) {\n        const { index, file, fileIndex } = action;\n        return update(state, {\n            [index]: {\n                files: {$splice: [[fileIndex, 0, file]]}\n            }\n        });\n    } else if(action.type === EventTypes.FILE_PART_CHANGED) {\n        const { index, fileIndex, part, value } = action;\n        return update(state, {\n            [index]: {\n                files: {\n                    [fileIndex]: {\n                        [part]: { $set: value }\n                    }\n                }\n            }\n        });\n    } else if(action.type === EventTypes.FILE_DELETED) {\n        const { index, fileIndex } = action;\n        return update(state, {\n            [index]: {\n                files: {$splice: [[fileIndex, 1]]}\n            }\n        });\n    } else {\n        return state;\n    }\n}","import { IProblemUserInfo } from '../components/App';\nimport EventTypes from '../actions/EventTypes';\nimport update from 'immutability-helper';\n\nexport const userData = (state: {[problemID: string]: IProblemUserInfo} = {}, action: any) => {\n    if(action.type === EventTypes.PUZZLES_FETCHED) {\n        const { puzzles } = action;\n        if(puzzles) {\n            return JSON.parse(JSON.stringify(puzzles.userData));\n        } else {\n            return {};\n        }\n    } else if(action.type === EventTypes.PROBLEM_VISIBILITY_CHANGED) {\n        const { problemID, visible } = action;\n        return update(state, { $merge: {\n                [problemID]: { visible, completed: [] }\n            }\n        });\n    } else if(action.type === EventTypes.PROBLEM_COMPLETION_INFO_FETCHED) {\n        const { completionInfo, problemID } = action;\n        return update(state, {\n            [problemID]: { $set: completionInfo }\n        });\n    } else if(action.type === EventTypes.USER_COMPLETED_PROBLEM) {\n        const { index, problemID, userID } = action;\n        return update(state, {\n            [problemID]: {\n                completed: { $splice: [[index, 0, userID]] }\n            }\n        });\n    } else {\n        return state;\n    }\n}","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { render } from 'react-dom'\nimport * as React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers'\nimport { App } from './components/App';\nimport './css/index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nconst ENABLE_LOGGER = false;\nconst middleware = [thunkMiddleware];\nif(ENABLE_LOGGER) {\n    const loggerMiddleware = createLogger();\n    middleware.push(loggerMiddleware);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));\n\nrender(\n    <div>hi!</div>,\n    // <Provider store={store}>\n    //     <App isAdmin={false} />\n    // </Provider>,\n    document.getElementById('root')\n)\nregisterServiceWorker(); "],"sourceRoot":""}